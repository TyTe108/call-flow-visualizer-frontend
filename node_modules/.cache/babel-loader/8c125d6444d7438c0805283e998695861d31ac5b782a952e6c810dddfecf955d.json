{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const callFlowAPI = {\n  // Fetch call flow data for a specific domain\n  getCallFlowByDomain: async (domain, graphId) => {\n    try {\n      const response = await api.post(`/graphs/domain?domain=${domain}`, {\n        graph_id: graphId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching call flow data:', error);\n      throw error;\n    }\n  },\n  // Transform backend data to XYFlow format with hierarchical layout\n  transformToXYFlowData: backendData => {\n    // Group nodes by type for hierarchical layout\n    const nodesByType = {\n      did: [],\n      auto_attendant: [],\n      call_queue: [],\n      hunt_group: [],\n      user: [],\n      voicemail: []\n    };\n\n    // Separate nodes by type\n    backendData.nodes.forEach(node => {\n      if (nodesByType[node.node_type]) {\n        nodesByType[node.node_type].push(node);\n      }\n    });\n\n    // Define column positions and spacing\n    const columnConfig = {\n      did: {\n        x: 50,\n        width: 280\n      },\n      auto_attendant: {\n        x: 380,\n        width: 300\n      },\n      call_queue: {\n        x: 730,\n        width: 280\n      },\n      hunt_group: {\n        x: 730,\n        width: 280\n      },\n      // Same column as call_queue\n      user: {\n        x: 1060,\n        width: 250\n      },\n      voicemail: {\n        x: 1360,\n        width: 250\n      }\n    };\n    const nodeSpacing = 180;\n    const startY = 100;\n\n    // Position nodes hierarchically\n    const nodes = [];\n    let huntGroupOffset = 0;\n    Object.keys(nodesByType).forEach(nodeType => {\n      const nodesOfType = nodesByType[nodeType];\n      const config = columnConfig[nodeType];\n      nodesOfType.forEach((node, index) => {\n        let yPosition = startY + index * nodeSpacing;\n\n        // Special handling for hunt_group to avoid overlap with call_queue\n        if (nodeType === 'hunt_group') {\n          const callQueueCount = nodesByType.call_queue.length;\n          huntGroupOffset = Math.max(huntGroupOffset, callQueueCount * nodeSpacing + 50);\n          yPosition = startY + huntGroupOffset + index * nodeSpacing;\n        }\n        nodes.push({\n          id: node.node_id,\n          type: node.node_type,\n          position: {\n            x: config.x + (Math.random() * 30 - 15),\n            // Small random offset for visual variety\n            y: yPosition + (Math.random() * 20 - 10)\n          },\n          data: {\n            ...node.metadata,\n            label: node.node_type\n          }\n        });\n      });\n    });\n\n    // Create edges with improved styling\n    const edges = backendData.edges.map(edge => ({\n      id: edge.edge_id,\n      source: edge.source_id,\n      target: edge.target_id,\n      type: 'smoothstep',\n      animated: true,\n      label: edge.edge_type.replace(/_/g, ' ').toUpperCase(),\n      labelStyle: {\n        fontSize: 10,\n        fill: '#666',\n        fontWeight: 'bold'\n      },\n      style: {\n        stroke: '#4f46e5',\n        strokeWidth: 2\n      },\n      markerEnd: {\n        type: 'arrowclosed',\n        color: '#4f46e5'\n      }\n    }));\n    return {\n      nodes,\n      edges\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","callFlowAPI","getCallFlowByDomain","domain","graphId","response","post","graph_id","data","error","console","transformToXYFlowData","backendData","nodesByType","did","auto_attendant","call_queue","hunt_group","user","voicemail","nodes","forEach","node","node_type","push","columnConfig","x","width","nodeSpacing","startY","huntGroupOffset","Object","keys","nodeType","nodesOfType","config","index","yPosition","callQueueCount","length","Math","max","id","node_id","type","position","random","y","metadata","label","edges","map","edge","edge_id","source","source_id","target","target_id","animated","edge_type","replace","toUpperCase","labelStyle","fontSize","fill","fontWeight","style","stroke","strokeWidth","markerEnd","color"],"sources":["/Users/tylerte/Coding/call_flow_visualizer _frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const callFlowAPI = {\n  // Fetch call flow data for a specific domain\n  getCallFlowByDomain: async (domain, graphId) => {\n    try {\n      const response = await api.post(`/graphs/domain?domain=${domain}`, {\n        graph_id: graphId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching call flow data:', error);\n      throw error;\n    }\n  },\n\n  // Transform backend data to XYFlow format with hierarchical layout\n  transformToXYFlowData: (backendData) => {\n    // Group nodes by type for hierarchical layout\n    const nodesByType = {\n      did: [],\n      auto_attendant: [],\n      call_queue: [],\n      hunt_group: [],\n      user: [],\n      voicemail: []\n    };\n\n    // Separate nodes by type\n    backendData.nodes.forEach(node => {\n      if (nodesByType[node.node_type]) {\n        nodesByType[node.node_type].push(node);\n      }\n    });\n\n    // Define column positions and spacing\n    const columnConfig = {\n      did: { x: 50, width: 280 },\n      auto_attendant: { x: 380, width: 300 },\n      call_queue: { x: 730, width: 280 },\n      hunt_group: { x: 730, width: 280 }, // Same column as call_queue\n      user: { x: 1060, width: 250 },\n      voicemail: { x: 1360, width: 250 }\n    };\n\n    const nodeSpacing = 180;\n    const startY = 100;\n\n    // Position nodes hierarchically\n    const nodes = [];\n    let huntGroupOffset = 0;\n\n    Object.keys(nodesByType).forEach(nodeType => {\n      const nodesOfType = nodesByType[nodeType];\n      const config = columnConfig[nodeType];\n      \n      nodesOfType.forEach((node, index) => {\n        let yPosition = startY + (index * nodeSpacing);\n        \n        // Special handling for hunt_group to avoid overlap with call_queue\n        if (nodeType === 'hunt_group') {\n          const callQueueCount = nodesByType.call_queue.length;\n          huntGroupOffset = Math.max(huntGroupOffset, callQueueCount * nodeSpacing + 50);\n          yPosition = startY + huntGroupOffset + (index * nodeSpacing);\n        }\n        \n        nodes.push({\n          id: node.node_id,\n          type: node.node_type,\n          position: { \n            x: config.x + (Math.random() * 30 - 15), // Small random offset for visual variety\n            y: yPosition + (Math.random() * 20 - 10)\n          },\n          data: {\n            ...node.metadata,\n            label: node.node_type\n          }\n        });\n      });\n    });\n\n    // Create edges with improved styling\n    const edges = backendData.edges.map(edge => ({\n      id: edge.edge_id,\n      source: edge.source_id,\n      target: edge.target_id,\n      type: 'smoothstep',\n      animated: true,\n      label: edge.edge_type.replace(/_/g, ' ').toUpperCase(),\n      labelStyle: {\n        fontSize: 10,\n        fill: '#666',\n        fontWeight: 'bold'\n      },\n      style: {\n        stroke: '#4f46e5',\n        strokeWidth: 2\n      },\n      markerEnd: {\n        type: 'arrowclosed',\n        color: '#4f46e5',\n      }\n    }));\n\n    return { nodes, edges };\n  }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}