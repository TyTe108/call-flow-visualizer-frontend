{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const callFlowAPI = {\n  // Fetch call flow data for a specific domain\n  getCallFlowByDomain: async (domain, graphId) => {\n    try {\n      const response = await api.post(`/graphs/domain?domain=${domain}`, {\n        graph_id: graphId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching call flow data:', error);\n      throw error;\n    }\n  },\n  // Transform backend data to XYFlow format\n  transformToXYFlowData: backendData => {\n    const nodes = backendData.nodes.map((node, index) => ({\n      id: node.node_id,\n      type: node.node_type,\n      position: {\n        x: index % 3 * 300 + Math.random() * 50,\n        y: Math.floor(index / 3) * 200 + Math.random() * 50\n      },\n      data: {\n        ...node.metadata,\n        label: node.node_type\n      }\n    }));\n    const edges = backendData.edges.map(edge => ({\n      id: edge.edge_id,\n      source: edge.source_id,\n      target: edge.target_id,\n      type: 'smoothstep',\n      animated: true,\n      label: edge.edge_type.replace(/_/g, ' ').toUpperCase(),\n      labelStyle: {\n        fontSize: 10,\n        fill: '#666'\n      },\n      style: {\n        stroke: '#666',\n        strokeWidth: 2\n      }\n    }));\n    return {\n      nodes,\n      edges\n    };\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","callFlowAPI","getCallFlowByDomain","domain","graphId","response","post","graph_id","data","error","console","transformToXYFlowData","backendData","nodes","map","node","index","id","node_id","type","node_type","position","x","Math","random","y","floor","metadata","label","edges","edge","edge_id","source","source_id","target","target_id","animated","edge_type","replace","toUpperCase","labelStyle","fontSize","fill","style","stroke","strokeWidth"],"sources":["/Users/tylerte/Coding/call_flow_visualizer _frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const callFlowAPI = {\n  // Fetch call flow data for a specific domain\n  getCallFlowByDomain: async (domain, graphId) => {\n    try {\n      const response = await api.post(`/graphs/domain?domain=${domain}`, {\n        graph_id: graphId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching call flow data:', error);\n      throw error;\n    }\n  },\n\n  // Transform backend data to XYFlow format\n  transformToXYFlowData: (backendData) => {\n    const nodes = backendData.nodes.map((node, index) => ({\n      id: node.node_id,\n      type: node.node_type,\n      position: { \n        x: (index % 3) * 300 + Math.random() * 50, \n        y: Math.floor(index / 3) * 200 + Math.random() * 50 \n      },\n      data: {\n        ...node.metadata,\n        label: node.node_type\n      }\n    }));\n\n    const edges = backendData.edges.map(edge => ({\n      id: edge.edge_id,\n      source: edge.source_id,\n      target: edge.target_id,\n      type: 'smoothstep',\n      animated: true,\n      label: edge.edge_type.replace(/_/g, ' ').toUpperCase(),\n      labelStyle: {\n        fontSize: 10,\n        fill: '#666'\n      },\n      style: {\n        stroke: '#666',\n        strokeWidth: 2\n      }\n    }));\n\n    return { nodes, edges };\n  }\n};\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,WAAW,GAAG;EACzB;EACAC,mBAAmB,EAAE,MAAAA,CAAOC,MAAM,EAAEC,OAAO,KAAK;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,yBAAyBH,MAAM,EAAE,EAAE;QACjEI,QAAQ,EAAEH;MACZ,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,qBAAqB,EAAGC,WAAW,IAAK;IACtC,MAAMC,KAAK,GAAGD,WAAW,CAACC,KAAK,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,MAAM;MACpDC,EAAE,EAAEF,IAAI,CAACG,OAAO;MAChBC,IAAI,EAAEJ,IAAI,CAACK,SAAS;MACpBC,QAAQ,EAAE;QACRC,CAAC,EAAGN,KAAK,GAAG,CAAC,GAAI,GAAG,GAAGO,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE;QACzCC,CAAC,EAAEF,IAAI,CAACG,KAAK,CAACV,KAAK,GAAG,CAAC,CAAC,GAAG,GAAG,GAAGO,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;MACnD,CAAC;MACDhB,IAAI,EAAE;QACJ,GAAGO,IAAI,CAACY,QAAQ;QAChBC,KAAK,EAAEb,IAAI,CAACK;MACd;IACF,CAAC,CAAC,CAAC;IAEH,MAAMS,KAAK,GAAGjB,WAAW,CAACiB,KAAK,CAACf,GAAG,CAACgB,IAAI,KAAK;MAC3Cb,EAAE,EAAEa,IAAI,CAACC,OAAO;MAChBC,MAAM,EAAEF,IAAI,CAACG,SAAS;MACtBC,MAAM,EAAEJ,IAAI,CAACK,SAAS;MACtBhB,IAAI,EAAE,YAAY;MAClBiB,QAAQ,EAAE,IAAI;MACdR,KAAK,EAAEE,IAAI,CAACO,SAAS,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;MACtDC,UAAU,EAAE;QACVC,QAAQ,EAAE,EAAE;QACZC,IAAI,EAAE;MACR,CAAC;MACDC,KAAK,EAAE;QACLC,MAAM,EAAE,MAAM;QACdC,WAAW,EAAE;MACf;IACF,CAAC,CAAC,CAAC;IAEH,OAAO;MAAEhC,KAAK;MAAEgB;IAAM,CAAC;EACzB;AACF,CAAC;AAED,eAAehC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}